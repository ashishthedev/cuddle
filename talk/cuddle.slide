# This is a file. (or is it?)

Cuddle
A Go App Engine demo
Andrew Gerrand
adg@golang.org
GTUG Sydney
Aug 30, 2011

* Go on App Engine

Available to the public since July 2011.

All major App Engine APIs are supported:
- capability
- channel
- datastore
- mail
- memcache
- taskqueue
- urlfetch
- user

* Cuddle: multi-user anonymous chat

Users visit a url, eg http://cuddle-demo.appspot.com/gtug 

This adds them to the "gtug" room.

Users send messages to the room.

All present members receive them.

That's it. (Try it now!)

* How it works: joining (1)

The path component of the URL (eg, "/gtug") corresponds to a Room record in the datastore.

Participants in a Room correspond to a Client record.

When a user loads that URL:
- Look up the Room named "gtug". If it doesn't exist, create it.
- Generate a random ID for this user/session, and create a Client record as a child of the Room record.
- Create a browser channel with the Channel API. The channel is identified by the Client ID. 
- Serve the HTML/JS/CSS to the user, including the room name and browser channel token.
- The client-side JavaScript connects to the channel after the page loads.

* How it works: messages (2)

Clients receive messages through the browser channel. When the client-side JavaScript receives a message it draws the message to the UI.

Clients post messages by fetching "/post?room=gtug&=MESSAGE". On receiving that request, the server does this: 
- Query the datastore for all Clients whose parent is the Room "gtug".
- Send a message to each of those Clients using the Channel API.

* Anatomy of a Go app

code cuddle/snippets /cuddle\// /root\.html/

* app.yaml

code ../app.yaml

* Go's http package

code cuddle/hello

* Package http and App Engine

App Engine apps use the "http" package to serve HTTP, too.
code cuddle/hellogae

* Cuddle's HTTP handlers

Cuddle has two HTTP handlers:

root - join the client to a cuddle and serve the HTML/JS/CSS code.

post - post a message to a cuddle.

(It sends messages to clients via the Channel API.)

http.go:
code ../cuddle/http.go /func.init/ /}/

* The root handler (1)

The first part of the root handler gets the room name from the request URL and handles the case of a missing or invalid name.
code ../cuddle/http.go /root.is/ /.}/

* Naming code (name.go)

code ../cuddle/name.go /ValidName/ $

* The root handler (2)

Now that we have the name of the room, call the getRoom function to get or create a Room record in the datastore.

App Engine API calls are tied to the current request. To make any kind of API call we need an appengine.Context, which we get by calling appengine.NewContext with the current *http.Request.
code ../cuddle/http.go /NewContext/ /.}/

* The Room type

code ../cuddle/db.go /Room.represents/ /}/
code ../cuddle/db.go /Key/ /}/

* The getRoom function

code ../cuddle/db.go /getRoom/ $

* The root handler (3)

code ../cuddle/http.go /Create.a.new/ /}/

* The AddClient method

AddClient puts a Client record to the datastore with the Room as its parent, creates a channel, and returns the channel token.
code cuddle/snippets /AddClient/ /^}/
code ../cuddle/db.go /type.Client/ /}/

* The root handler (4)

Finally, we have a *Room and a channel token. Let's render the HTML template.

The "data" variable is an anonymous struct with the two fields we want to pass to the template, Room and Token.
code ../cuddle/http.go /Render/ /^}/

* The root template

code ../tmpl/root.html /<div/ /^.}/

* The post handler

code ../cuddle/http.go /post.broad/ /^}/

* The Send method

code cuddle/snippets /Send/ /^}/

* Caching: the Send method

code cuddle/cache /Send/ /^}/

* Caching: the AddClient method

code ../cuddle/db.go /AddClient\(/ /^}/

* That's it!

This project: http://code.google.com/p/cuddle/

App Engine for Go: http://code.google.com/appengine/docs/go/

The Go web site: http://golang.org/

The Go blog: http://blog.golang.org/

